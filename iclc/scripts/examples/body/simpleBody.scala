
class SimpleBody extends SeerActor {
  val cube = Cube().scale(0.1)
  val mesh = Mesh()
  mesh.primitive = Points 
  mesh.maxVertices = 640*480
  val model = Model(mesh)

  
  val lfo = Sine(4,40)                  // create lfo at 4 hz
  val synth = lfo + 140 >> Sine()       // create synth as lfo modulating frequency of a sine oscillator
  synth >> Out

  // listen for user data generated by an active OpenNI depth camera
  override def init(){
    OpenNI.listen { 
      case body :: bodies =>                // user object contains image data, point cloud, and skeleton joint information
        cube.pose.pos = body.head                // map position of cube to position of user's head
        lfo.a = body.head.y * 100f                        // set lfo frequency to head height
        lfo.f = 4f / (body.l_hand - body.r_hand).mag   // set lfo amplitude to distance between hands
        Run.animate {
          mesh.clear
          mesh.vertices ++= body.points // set mesh vertices to user point cloud data
          mesh.update  
        }             
      case _ => ()
    }
  }

  override def draw(){
    cube.draw
    model.draw
    MatrixStack.push()
    MatrixStack.translate(1,0,0)
    MatrixStack.scale(-1,1,1)
    cube.draw
    model.draw
    MatrixStack.pop()
  }

  Keyboard.listen {
    case 'r' => com.fishuyo.seer.openni.OpenNI.resetTracking()
  }
}

classOf[SimpleBody]